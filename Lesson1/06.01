//Dış sistemden data çekmek
//ornek 2: Endpoint olarak https://jsonplaceholder.typicode.com/users/1 sitesini 
//kullanarak 1 user'ın bilgilerini çekiniz.
---------------------------------------class ici
public class ContactRestCallout {
    
	//Dış sistemden data çekmek
	//ornek 2: Endpoint olarak https://jsonplaceholder.typicode.com/users/1 sitesini 
	//kullanarak 1 user'ın bilgilerini çekiniz.
	
    public static void getContacts(){
        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://jsonplaceholder.typicode.com/users/1');
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            //Yardimci class'imizdan object olusturacagiz.
            RestContactParse myContact = RestContactParse.parse(response.getBody());
            //response.getBody() icinde string formatta JSON yapisi vardir
            
            System.debug(myContact.name);
            System.debug(myContact.email);
            System.debug(myContact.Company.name);
            
            //Farkli bir kaynaktan (database) gelen bu data ile bir contact olusturalim.
            Contact cont = new Contact();
            cont.LastName = myContact.name;
            cont.Email = myContact.email;
            insert cont;
            //Admin parta gidip olusup olusmadigina bakalim.
            //ContactRestCallout.getContacts(); ile calistir
        }        
    }
}
//-------------------------------------------yardimci(parse) class ici
//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class RestContactParse {

	public class Geo {
		public String lat;
		public String lng;
	}

	public class Company {
		public String name;
		public String catchPhrase;
		public String bs;
	}

	public Integer id;
	public String name;
	public String username;
	public String email;
	public Address address;
	public String phone;
	public String website;
	public Company company;

	public class Address {
		public String street;
		public String suite;
		public String city;
		public String zipcode;
		public Geo geo;
	}

	
	public static RestContactParse parse(String json) {
		return (RestContactParse) System.JSON.deserialize(json, RestContactParse.class);
	}
}
//-----------------------------------Gelistirme
public class ContactRestCallout {
    
	//Dış sistemden data çekmek
	//ornek 2: Endpoint olarak https://jsonplaceholder.typicode.com/users/1 sitesini 
	//kullanarak 1 user'ın bilgilerini çekiniz.
	//kod gelistirmesi: Parametre girerek diger user'larida cagirabilelim.
	
    public static void getContacts(String userId){ //A- Parametre girisi.
        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://jsonplaceholder.typicode.com/users/' + userId); //B-1'sil,userId ile concatinate yap
        request.setMethod('GET');
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            //Yardimci class'imizdan object olusturacagiz.
            RestContactParse myContact = RestContactParse.parse(response.getBody());
            //response.getBody() icinde string formatta JSON yapisi vardir
            
            System.debug(myContact.name);
            System.debug(myContact.email);
            System.debug(myContact.Company.name);
            
            //Farkli bir kaynaktan (database) gelen bu data ile bir contact olusturalim.
            Contact cont = new Contact();
            cont.LastName = myContact.name;
            cont.Email = myContact.email;
            //insert cont; 
            //Admin parta gidip olusup olusmadigina bakalim.
            //ContactRestCallout.getContacts(); ile calistir
            //C-Gelistirmeyi ContactRestCallout.getContacts('2'); ile calistir
        }        
    }
}

//------------------------------------
ContactRestCallout.getContacts('2'); //ile tek tek kayitlara ulastik

for(Integer i=1; i<11; i++){
    ContactRestCallout.getContacts(String.valueOf(i)); //butun kayitlara ulastik
    
}

//------------------------------------

//Dis sistemden data cekmek:
//ornek 3: Endpoint olarak https://gorest.co.in/public/v2/users/ sitesini kullanarak tum user'lari cekiniz. 

public class GorestUsers {
    
    //Dis sistemden data cekmek:
	//ornek 3: Endpoint olarak https://gorest.co.in/public/v2/users/ sitesini kullanarak tum user'lari cekiniz. 
	//gorest List<Object> formatinda data gonderir
	
    public static void getUsers(){
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://gorest.co.in/public/v2/users/');
        request.setMethod('GET');
        
        request.setHeader('Authorization', 'Bearer cc393ab1712be10607a2ce01e9cc1c92d3e3751ee41fdddb6d57bc17bb3d8906');
        
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            List<Object> restGoUser = (List<Object>) JSON.deserializeUntyped(response.getBody());
            for(Object w : restGoUser){
                System.debug('Result: ' + w); //GorestUsers.getUsers(); ile calistir
            }
        }else{
            System.debug('Error: ' + response.getStatusCode() + ' ' + response.getStatus());
        }
    }
}

//---------------gelistirme

public class GorestUsers {
    
    //Dis sistemden data cekmek:
	//ornek 3: Endpoint olarak https://gorest.co.in/public/v2/users/ sitesini kullanarak tum user'lari cekiniz. 
	//gorest List<Object> formatinda data gonderir
	//GELISTIRME: Gorest endpoint'i Id parametresi ile talep gonderdigimizde bize tek bir Object yapisinda sonuc gondermektedir
	
    public static void getUsers(String userId){ //1-string parametre ekle
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://gorest.co.in/public/v2/users/' + userId); //2- userId ekle.
        request.setMethod('GET');
        
        request.setHeader('Authorization', 'Bearer cc393ab1712be10607a2ce01e9cc1c92d3e3751ee41fdddb6d57bc17bb3d8906');
        
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            //List<Object> restGoUser = (List<Object>) JSON.deserializeUntyped(response.getBody()); //3- 4 satiri yoruma dusur (if'in ici)
            //for(Object w : restGoUser){
                //System.debug('Result: ' + w); //GorestUsers.getUsers(); ile calistir
            //}
            Object user1 =(Object) JSON.deserializeUntyped(response.getBody()); //4-
            System.debug('Result: ' + user1); //5-
            
        }else{
            System.debug('Error: ' + response.getStatusCode() + ' ' + response.getStatus());
        }
    }
}

//------------------------
GorestUsers.getUsers('4384');

//------------------------GELISTIRME 2
//Bu gelistirmede, diger sistemden donen JSON formatindaki veriyi ayri bir class'ta parse edelim

public class GorestUsers {
    
    //Dis sistemden data cekmek:
	//ornek 3: Endpoint olarak https://gorest.co.in/public/v2/users/ sitesini kullanarak tum user'lari cekiniz. 
	//gorest List<Object> formatinda data gonderir
	//GELISTIRME: Gorest endpoint'i Id parametresi ile talep gonderdigimizde bize tek bir Object yapisinda sonuc gondermektedir
	
    public static void getUsers(String userId){ //1-string parametre ekle
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://gorest.co.in/public/v2/users/' + userId); //2- userId ekle.
        request.setMethod('GET');
        
        request.setHeader('Authorization', 'Bearer cc393ab1712be10607a2ce01e9cc1c92d3e3751ee41fdddb6d57bc17bb3d8906');
        
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            //List<Object> restGoUser = (List<Object>) JSON.deserializeUntyped(response.getBody()); //3- 4 satiri yoruma dusur (if'in ici)
            //for(Object w : restGoUser){
                //System.debug('Result: ' + w); //GorestUsers.getUsers(); ile calistir
            //}
            Object user1 =(Object) JSON.deserializeUntyped(response.getBody()); //4-
            System.debug('Result: ' + user1); //5-
            
        }else{
            System.debug('Error: ' + response.getStatusCode() + ' ' + response.getStatus());
        }
    }
    
    //-----------------------
    //Gelistirme 2-
    public static void getUsers2(String userId){
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://gorest.co.in/public/v2/users/' + userId); 
        request.setMethod('GET');
        
        request.setHeader('Authorization', 'Bearer cc393ab1712be10607a2ce01e9cc1c92d3e3751ee41fdddb6d57bc17bb3d8906');
        
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==200){
            ContactParse goUser = ContactParse.parse(response.getBody());
            System.debug('Result: ' + goUser.name); //istersek ContactParse'daki diger field'leri de yazdirabilirdik.
        }else{
            System.debug('Error: ' + response.getStatusCode() + ' ' + response.getStatus());
        }
    }
}

//--------------------------calistirilmasi
GorestUsers.getUsers2('4384');

//--------------------------
//Dis sisteme data gondermek
//Method Type = POST
//GET method'una ilave olarak;

	//Header kisminda Content Type belirtilir.
	//Body kismini ekelenecek data girilir. Data, JSON formatinda body kismina eklenmelidir.
//---------------------------

//ornek 1: https://th-apex-http-callout.herokuapp.com/animals 'a yeni data POST ediniz.

public class AnimalRestCallout {
	
    public static void getAnimals(){
        //Postman'de 1-New'e bas 2- Http Request 3- Endpoint linki(URL) 4-Methodu sec(GET) 5-Send'e bas.
        Http http = new Http(); //1-
        HttpRequest request = new HttpRequest(); //2
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals'); //3
        request.setMethod('GET'); //4-GET buyuk harfle yazilmalidir
        HttpResponse response = http.send(request); //5-send'e basilinca gelen cevap response'a yuklendi
        
        if(response.getStatusCode()==200){ // esitse data sikintisiz gelmistir
            
            //Gelen data'yi ayristirma (parse) 'da iki yontem vardir.
            //1.yol: Parse islemi request'i yapan class icinde yapilir.
            //response.getBody() Json string yapisindadir.         
            
            //Map<String,Object> results = (Map<String,Object>) JSON.deserializeUntyped(response.getBody());
            //(Map<String,Object>) casting(kaliba dokmek) islemidir
            
            //List<Object> animals = (List<Object>) results.get('animals'); // get('animals')'taki animlas key'dir.
            //----------------------------------------------------
            //2.yol'da parse islemi icin ayri bir class olusturulur
            //Diger class'imizdan bir instance olusturacagiz.
            RestAnimalParse rap = RestAnimalParse.parse(response.getBody());
            
            for(Object w : rap.animals){
                System.debug(w);
                
            }             
        }
    }
    
    //---------------------------------
    //POST islemi icin yeni bir method olusturalim.
    
    public static void postAnimals(){
        
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://th-apex-http-callout.herokuapp.com/animals');
        request.setMethod('POST');
        
        request.setHeader('Content-Type','application/json;charset=UTF-8'); //yeni bilgi 1
        request.setBody('{"name":"civciv"}'); //yeni bilgi: gonderilecek JSON object'i setBody ile yazilir.
        
        HttpResponse response = http.send(request);
        
        if(response.getStatusCode()==201){
            System.debug(response.getBody());
        }else{
            System.debug('Beklenmeyen durum kodu geldi : ' + response.getStatusCode() + ' ' + response.getStatus());
        }        
    }
}

//--------------calistirilmasi
AnimalRestCallout.postAnimals();

